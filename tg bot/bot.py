import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import nest_asyncio
import asyncio

# üîí –¢–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7941509777:AAGfhazLCs94gtDwPb1qnTHY1A45P7WKy_s"

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
questions = [
    "1. –ú–Ω–µ —Ç—è–∂–µ–ª–æ –∑–∞—Å—ã–ø–∞—Ç—å –ø–æ –Ω–æ—á–∞–º",
    "2. –Ø —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã",
    "3. –ú–Ω–µ —Ç—Ä—É–¥–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å –ª—é–¥—è–º",
    "4. –Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—Ç—Å—Ç—Ä–∞–Ω—ë–Ω–Ω–æ –æ—Ç –±–ª–∏–∑–∫–∏—Ö",
    "5. –£ –º–µ–Ω—è —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç —Ä–µ–∑–∫–∏–µ –ø–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
    "6. –Ø –±—ã—Å—Ç—Ä–æ —É—Å—Ç–∞—é, –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ –Ω–∞–ø—Ä—è–≥–∞—é—Å—å",
    "7. –ú–µ–Ω—è —Ä–∞–∑–¥—Ä–∞–∂–∞—é—Ç –º–µ–ª–æ—á–∏",
    "8. –Ø –∏–∑–±–µ–≥–∞—é –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏",
    "9. –ú–Ω–µ —Å–ª–æ–∂–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö",
    "10. –Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã",
    "11. –ú–Ω–µ —Å–ª–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –ø—Ä–∏–≤—ã—á–Ω—ã—Ö –≤–µ—â–µ–π",
    "12. –Ø —á—É–≤—Å—Ç–≤—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø—É—Å—Ç–æ—Ç—É",
    "13. –Ø —Å—Ç–∞–ª –±–æ–ª–µ–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º",
    "14. –£ –º–µ–Ω—è –ø—Ä–æ–ø–∞–ª –∞–ø–ø–µ—Ç–∏—Ç –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç ‚Äî –ø–µ—Ä–µ–µ–¥–∞—é",
    "15. –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –Ω–∏–∫—Ç–æ –º–µ–Ω—è –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç",
    "16. –Ø –¥—É–º–∞—é –æ —Ç–æ–º, –∫–∞–∫ –≤—Å—ë –±—ã–ª–æ —Ä–∞–Ω—å—à–µ",
    "17. –Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –∑–∞—Å—Ç—Ä—è–ª –≤ –ø—Ä–æ—à–ª–æ–º",
    "18. –Ø —Ç—Ä–µ–≤–æ–∂—É—Å—å –∑–∞ –±—É–¥—É—â–µ–µ",
    "19. –ò–Ω–æ–≥–¥–∞ –º–Ω–µ —Ç—Ä—É–¥–Ω–æ –¥—ã—à–∞—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã",
    "20. –Ø —Ö–æ—á—É –±—ã—Ç—å –æ–¥–∏–Ω –∏ —á—Ç–æ–±—ã –º–µ–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞–ª"
]

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞
user_data = {}

# –õ–æ–≥–≥–∏–Ω–≥
logging.basicConfig(level=logging.INFO)

# –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def interpret_result(score):
    if score <= 40:
        return "üîµ –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∏–∑–∫–∏–π. –ü–æ—Ö–æ–∂–µ, —Ç—ã –∞–¥–∞–ø—Ç–∏—Ä—É–µ—à—å—Å—è —Ö–æ—Ä–æ—à–æ."
    elif score <= 70:
        return "üü° –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–µ–º-—Ç–æ."
    else:
        return "üî¥ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º."

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {
        "current_question": 0,
        "answers": []
    }

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ç—ã –∞–¥–∞–ø—Ç–∏—Ä—É–µ—à—å—Å—è –∫ –º–∏—Ä–Ω–æ–π –∂–∏–∑–Ω–∏. "
        "–û—Ç–≤–µ—Ç—å –Ω–∞ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 (—Å–æ–≤—Å–µ–º –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω) –¥–æ 5 (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω).\n\n"
        "–ù–∞—á–Ω—ë–º:"
    )
    await send_question(update, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    q_index = user_data[user_id]["current_question"]

    if q_index < len(questions):
        reply_markup = ReplyKeyboardMarkup([['1', '2', '3', '4', '5']], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(questions[q_index], reply_markup=reply_markup)
    else:
        await finish_test(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if text not in ['1', '2', '3', '4', '5']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    user_data[user_id]["answers"].append(int(text))
    user_data[user_id]["current_question"] += 1

    await send_question(update, context)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
async def finish_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    score = sum(user_data[user_id]["answers"])
    result_text = interpret_result(score)

    await update.message.reply_text(
        f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n–¢–≤–æ–π –±–∞–ª–ª: {score} –∏–∑ 100\n{result_text}",
        reply_markup=ReplyKeyboardRemove()
    )

    if score > 70:
        await update.message.reply_text(
            "üî¥ –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º? –ù–∞–ø–∏—à–∏ –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É:\n@your_psychologist_username"
        )
    else:
        await update.message.reply_text("–ï—Å–ª–∏ —Ç–µ–±–µ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –±–æ—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.")

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    del user_data[user_id]

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == '__main__':
    # –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º event loop
    nest_asyncio.apply()

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
    asyncio.get_event_loop().run_until_complete(main())
